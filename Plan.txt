TASK 0 - Make a plan 

MVP = A functioning Game

TASK 1: Create infrastructure [html & css(not in MVP)]

[Function to start the game] - not in MVP

TASK 2: Function to make a move 

1. Prompt user for move 
2. Store that input 
3. Get computer to make random move 
4. Store computer move

TASK 3: Function to get score 

1. Compare move of to make a move function
2. Output: Computer wins or player wins or a draw 

userRock && computerScissors = User wins
userRock && computerPaper = Computer wins 
userRock && computerRock = Draw 

userScissors && computerPaper = User wins 
userScissors && computerRock = Computer wins
userScissors && computerScissors = Draw 

userPaper && computerRock = User wins 
userPaper && computerScissors = Computer wins
userPaper && computerPaper = Draw 

TASK 4: Function to end game 

1. Read game output and log corresponding message [message varies based on result]
2. Prompt would you like to play again 

If answer if yes - repeat game function 
[If not - alert game is finished] - not MVP



Reflections after MVP 1 

- Each person being the driver. Pair programming. 
- Creating a plan was super useful to see the game flow to then create the code.
- Alex, who has more background knowledge, helps to explain processes and it helps uplift us. No one gets left behind ❤️
- Great teamwork & asking the right questions. 
- Breaking the ice is very important - adapting to new teams.

MVP 2 = Looping Game 

TASK 5: Replaying the game 

- Would you like to play again option 
- User inputs answer 
- Game starts again 


MVP 3 = Score 

Ref: Keep track of how many games have been played, as well as the number of wins, losses, and draws.

This will be deemed as complete when this information is displayed after each round. 

- Create 4 variables relating to score outside functions 
- Input variables into conclude game function
- Update 4 variables when the game concludes 
- After user completes game, display score 

MVP 4 = User's Name

MVP 5 = Display score the whole time